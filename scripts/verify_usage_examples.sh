#!/bin/bash
# Usage examples for the enhanced verification CLI

echo "Enhanced POT Verification CLI - Usage Examples"
echo "=============================================="

# Example 1: Basic verification with minimal parameters
echo ""
echo "1. Basic verification:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --outdir outputs/verify/basic"

# Example 2: Strict verification with tight error bounds
echo ""
echo "2. Strict verification (low error tolerance):"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --alpha 0.001 \\"
echo "    --beta 0.001 \\"
echo "    --tau-id 0.01 \\"
echo "    --n-max 1000 \\"
echo "    --outdir outputs/verify/strict"

# Example 3: Quick verification with relaxed bounds
echo ""
echo "3. Quick verification (higher error tolerance):"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --alpha 0.1 \\"
echo "    --beta 0.1 \\"
echo "    --tau-id 0.1 \\"
echo "    --n-max 100 \\"
echo "    --outdir outputs/verify/quick"

# Example 4: Verification with PRF and specific challenge family
echo ""
echo "4. PRF-based challenge generation:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --master-key \$(openssl rand -hex 32) \\"
echo "    --nonce \$(date +%s) \\"
echo "    --family vision:texture \\"
echo "    --params '{\"octaves\": [1, 5], \"scale\": [0.1, 2.0]}' \\"
echo "    --outdir outputs/verify/prf"

# Example 5: Verification with leakage control
echo ""
echo "5. Leakage-controlled verification:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --reuse-u 3 \\"
echo "    --rho-max 0.2 \\"
echo "    --outdir outputs/verify/leakage"

# Example 6: Verification with equivalence transforms
echo ""
echo "6. Verification with allowed transforms:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --equiv rotate90 flip_horizontal crop_center \\"
echo "    --wrapper-budget-proxy 0.2 \\"
echo "    --outdir outputs/verify/equiv"

# Example 7: Language model verification
echo ""
echo "7. Language model verification:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/lm_gpt2.yaml \\"
echo "    --family lm:templates \\"
echo "    --params '{\"templates\": [\"complete\", \"qa\"], \"slots\": {\"topic\": [\"science\", \"history\"]}}' \\"
echo "    --tau-id 0.1 \\"
echo "    --outdir outputs/verify/lm"

# Example 8: Full verification with all features
echo ""
echo "8. Full verification with all features:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --alpha 0.01 \\"
echo "    --beta 0.01 \\"
echo "    --tau-id 0.05 \\"
echo "    --n-max 512 \\"
echo "    --boundary EB \\"
echo "    --master-key \$(openssl rand -hex 32) \\"
echo "    --nonce \$(uuidgen) \\"
echo "    --family vision:freq \\"
echo "    --params '{\"freq_range\": [0.5, 8.0], \"contrast_range\": [0.2, 0.9]}' \\"
echo "    --equiv rotate90 flip_horizontal \\"
echo "    --wrapper-budget-proxy 0.15 \\"
echo "    --reuse-u 5 \\"
echo "    --rho-max 0.3 \\"
echo "    --verbose \\"
echo "    --outdir outputs/verify/full"

# Example 9: CPU-only verification for testing
echo ""
echo "9. CPU-only verification:"
echo "python scripts/run_verify_enhanced.py \\"
echo "    --config configs/vision_cifar10.yaml \\"
echo "    --cpu-only \\"
echo "    --n-max 50 \\"
echo "    --no-plots \\"
echo "    --outdir outputs/verify/cpu"

# Example 10: Batch verification script
echo ""
echo "10. Batch verification (example loop):"
echo "for tau in 0.01 0.05 0.1; do"
echo "    python scripts/run_verify_enhanced.py \\"
echo "        --config configs/vision_cifar10.yaml \\"
echo "        --tau-id \$tau \\"
echo "        --outdir outputs/verify/batch/tau_\$tau"
echo "done"

echo ""
echo "=============================================="
echo "Output Artifacts:"
echo "  - commit.json: Private pre-response commitment data"
echo "  - commitment.json: Public commitment hash"
echo "  - reveal.json: Post-response reveal data"
echo "  - decision.json: Verification decision and statistics"
echo "  - audit_*.json: Complete audit record with timestamps"
echo "  - plots/: ROC, DET, and stopping time visualizations"
echo ""
echo "Decision Schema (decision.json):"
echo "  {"
echo "    \"session_id\": \"session_abc123\","
echo "    \"decision\": \"accept_id|reject_id|conservative_reject\","
echo "    \"stopping_time\": 42,"
echo "    \"mean\": 0.023,"
echo "    \"radius\": 0.015,"
echo "    \"confidence_interval\": {\"lower\": 0.008, \"upper\": 0.038},"
echo "    \"tau\": 0.05,"
echo "    \"alpha\": 0.01,"
echo "    \"beta\": 0.01,"
echo "    \"n_max\": 512,"
echo "    \"boundary_type\": \"EB\","
echo "    \"timestamp\": 1234567890.123,"
echo "    \"leakage\": {"
echo "      \"observed_rho\": 0.12,"
echo "      \"total_challenges\": 42,"
echo "      \"leaked_challenges\": 5"
echo "    }"
echo "  }"