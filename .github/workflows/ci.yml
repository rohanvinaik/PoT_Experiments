name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  CACHE_NUMBER: 0  # Increment to reset cache
  POT_CI_MODE: 'true'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint
          
      - name: Run black
        run: black --check src/ scripts/ tests/
        
      - name: Run isort
        run: isort --check-only src/ scripts/ tests/
        
      - name: Run flake8
        run: flake8 src/ scripts/ tests/ --max-line-length=100 --ignore=E203,W503
        
      - name: Run mypy
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
          key: ${{ runner.os }}-deps-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn pytest pytest-cov pytest-xdist
          pip install -e .
          
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v --cov=src/pot --cov-report=xml --cov-report=term -n auto
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies and models
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
            ~/test_models
          key: ${{ runner.os }}-integration-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn pytest pytest-timeout
          pip install -e .
          
      - name: Download test models
        run: |
          python scripts/ci/download_test_models.py --models gpt2 distilgpt2
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --timeout=300
          
      - name: Run E2E pipeline test
        run: |
          python scripts/run_e2e_validation.py \
            --ref-model gpt2 \
            --cand-model distilgpt2 \
            --mode quick \
            --dry-run \
            --output-dir ci_test_output
            
      - name: Validate output
        run: |
          python scripts/ci/validate_evidence.py --dir ci_test_output

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn pytest
          pip install -e .
          
      - name: Run security audit tests
        run: |
          pytest tests/test_audit_security/ -v
          
      - name: Test adversarial robustness
        run: |
          python scripts/test_adversarial_robustness.py --quick

  sharding-tests:
    name: Sharding Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn pytest psutil
          pip install -e .
          
      - name: Run sharding tests
        run: |
          pytest tests/test_sharding/ -v
          
      - name: Run sharding benchmark
        run: |
          python scripts/sharding/benchmark_large_models.py generic \
            --model-size-gb 10 \
            --dry-run

  performance-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
          key: ${{ runner.os }}-perf-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn pytest-benchmark
          pip install -e .
          
      - name: Run performance benchmarks
        run: |
          pytest tests/benchmarks/ -v --benchmark-only --benchmark-json=benchmark_results.json
          
      - name: Check for regressions
        run: |
          python scripts/ci/compare_benchmarks.py \
            --current benchmark_results.json \
            --threshold 10
            
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark_results.json

  evidence-generation:
    name: Generate CI Evidence Bundle
    runs-on: ubuntu-latest
    needs: [integration-tests, security-tests, sharding-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn
          pip install -e .
          
      - name: Generate evidence bundle
        run: |
          python scripts/ci/generate_evidence.py \
            --commit ${{ github.sha }} \
            --run-id ${{ github.run_id }} \
            --output evidence_bundle.zip
            
      - name: Upload evidence bundle
        uses: actions/upload-artifact@v3
        with:
          name: ci-evidence-${{ github.sha }}
          path: evidence_bundle.zip
          retention-days: 90

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          push: false
          tags: pot-experiments:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm pot-experiments:${{ github.sha }} python -c "import pot; print('PoT framework loaded successfully')"

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [evidence-generation, performance-tests, build-docker]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.evidence-generation.result }}" == "success" ] && \
             [ "${{ needs.performance-tests.result }}" == "success" ] && \
             [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Create status badge
        run: |
          echo "CI Status: ${{ steps.status.outputs.status }}"
          echo "::notice::CI pipeline completed with status: ${{ steps.status.outputs.status }}"