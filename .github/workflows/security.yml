name: Security Scanning and Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scan
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit
          
      - name: Run Safety check
        run: |
          pip install -r requirements.txt || true
          safety check --json --output safety-report.json || true
          
      - name: Run pip-audit
        run: |
          pip-audit --desc --format json --output pip-audit-report.json || true
          
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  code-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r src/ scripts/ -f json -o bandit-report.json || true
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten
          generateSarif: true
          
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
          
      - name: Upload code scan results
        uses: actions/upload-artifact@v3
        with:
          name: code-scan-results
          path: bandit-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Build Docker image
        run: |
          docker build -t pot-experiments:scan -f deploy/docker/Dockerfile .
          
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pot-experiments:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Detect secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline || true

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Download scan results
        uses: actions/download-artifact@v3
        with:
          path: security-results
          
      - name: Run compliance checks
        run: |
          python scripts/security/check_compliance.py \
            --scan-results security-results \
            --output compliance-report.json
            
      - name: Generate security report
        run: |
          python scripts/security/generate_security_report.py \
            --input security-results \
            --compliance compliance-report.json \
            --output security-assessment.html
            
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: |
            compliance-report.json
            security-assessment.html

  adversarial-testing:
    name: Adversarial Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers numpy scipy scikit-learn
          pip install -e .
          
      - name: Run adversarial attack tests
        run: |
          python scripts/security/test_adversarial_attacks.py \
            --quick-mode \
            --output adversarial-test-results.json
            
      - name: Test injection attacks
        run: |
          python scripts/security/test_injection_attacks.py \
            --output injection-test-results.json
            
      - name: Test timing attacks
        run: |
          python scripts/security/test_timing_attacks.py \
            --output timing-test-results.json
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: adversarial-test-results
          path: |
            adversarial-test-results.json
            injection-test-results.json
            timing-test-results.json

  audit-trail:
    name: Generate Security Audit Trail
    runs-on: ubuntu-latest
    needs: [compliance-check, adversarial-testing, secrets-scan, container-scan]
    if: always()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Download all security artifacts
        uses: actions/download-artifact@v3
        with:
          path: security-artifacts
          
      - name: Generate audit trail
        run: |
          python scripts/security/generate_audit_trail.py \
            --artifacts security-artifacts \
            --commit ${{ github.sha }} \
            --run-id ${{ github.run_id }} \
            --output security-audit-trail.json
            
      - name: Sign audit trail
        run: |
          # In production, use proper key management
          echo "${{ secrets.AUDIT_SIGNING_KEY }}" | base64 -d > signing_key.pem || true
          python scripts/security/sign_audit_trail.py \
            --input security-audit-trail.json \
            --key signing_key.pem \
            --output signed-audit-trail.json || \
          cp security-audit-trail.json signed-audit-trail.json
          rm -f signing_key.pem
          
      - name: Upload audit trail
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-trail-${{ github.sha }}
          path: signed-audit-trail.json
          retention-days: 90
          
      - name: Notify security status
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `Security scanning detected issues in run ${context.runId}. Please review the security artifacts.`,
              labels: ['security', 'urgent']
            });